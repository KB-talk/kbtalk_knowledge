import{_ as p,c as r,a as t,d as s,e as a,b as n,w as e,r as o,o as d}from"./app-EOse5uFc.js";const h="/kbtalk_knowledge/assets/LED%E9%85%8D%E7%BD%AE-C-AVuFKl.png",k={};function u(g,i){const l=o("Annotation");return d(),r("div",null,[i[8]||(i[8]=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><h3 id="gpio工作模式" tabindex="-1"><a class="header-anchor" href="#gpio工作模式"><span>GPIO工作模式</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>对STM32的IO口配置与51单片机不同。</p><p>51单片机的IO口只需定义引脚即可，即可使用输入输出模式；</p><p>但对与STM32的IO口只能选择1种工作模式。</p></div>',3)),s("p",null,[i[1]||(i[1]=a("对于STM32单片机，GPIO共有",-1)),i[2]||(i[2]=s("mark",{class:"important"},"8种",-1)),i[3]||(i[3]=a()),n(l,{label:"工作模式",total:1},{"item-0":e(()=>[...i[0]||(i[0]=[s("p",null,[a("GPIO大类上分为"),s("code",null,"输入"),a("、"),s("code",null,"输出"),a("模式，但是在使用中需要配置成具体的工作模式（8种工作模式种的1种）。")],-1)])]),_:1}),i[4]||(i[4]=a("工作模式。",-1))]),i[9]||(i[9]=s("ol",null,[s("li",null,"输入浮空")],-1)),s("p",null,[i[6]||(i[6]=a("引脚内部不接上拉/下拉电阻",-1)),n(l,{label:"电阻",total:1},{"item-0":e(()=>[...i[5]||(i[5]=[s("p",null,"上拉电阻的作用：当无外界信号输入时，可以将引脚电平维持在高电平。",-1),s("p",null,"下拉电阻的作用：当无外界信号输入时，可以将引脚电平维持在低电平。",-1)])]),_:1}),i[7]||(i[7]=a("，电平由外部电路决定。",-1))]),i[10]||(i[10]=t('<ol start="2"><li>输入上拉</li></ol><p>内部通过电阻接VCC，默认高电平，外力拉低时变低。</p><ol start="3"><li>输入下拉</li></ol><p>内部通过电阻接GND，默认低电平，外力拉高时变高。</p><ol start="4"><li>模拟输入</li></ol><p>引脚直接连接ADC，读取连续电压值（0~3.3V）。</p><ol start="5"><li>开漏输出</li></ol><p>只能主动拉低电平（开闸放水），高电平靠外部上拉电阻（如I²C）。</p><ol start="6"><li>推挽输出</li></ol><p>MOS管&quot;推&quot;（输出高）和&quot;拉&quot;（输出低）配合，强驱动高低电平。</p><ol start="7"><li>复用开漏</li></ol><p>将开漏输出交给外设控制（如I²C的SCL/SDA）。</p><ol start="8"><li>复用推挽</li></ol><p>将推挽输出交给外设控制（如USART_TX、SPI_SCK）。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>STM32单片机的引脚可以通过配置来实现上拉、下拉电阻。</p><p>但不代表，在硬件电路设计时不需要设计合适的电阻。</p></div><h3 id="gpio工作模式选择" tabindex="-1"><a class="header-anchor" href="#gpio工作模式选择"><span>GPIO工作模式选择</span></a></h3><p>对于LED需要较大的驱动能力，所以将GPIO的工作模式配置成<code>推挽输出</code>。</p><h2 id="工程配置" tabindex="-1"><a class="header-anchor" href="#工程配置"><span>工程配置</span></a></h2><p><img src="'+h+`" alt="LED配置"></p><p>将对应引脚配置为推挽输出模式。</p><ul><li>GPIO Output Level</li></ul><p>引脚初始化电平，可以选择高电平、低电平。</p><ul><li>GPIO Mode</li></ul><p>GPIO模式，在输出模式下可以选择开漏输出、推挽输出。</p><ul><li>GPIO Pull-up/Pull-down</li></ul><p>推挽输出模式下，上下拉电阻通常不需要启用，因为引脚已能稳定输出高低电平。</p><ul><li>Maximum Output Speed</li></ul><p>IO口输出速率。</p><ul><li>User Label</li></ul><p>用户标签，可以自定义引脚名称。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于驱动LED、蜂鸣器等设备，将IO口配置成<code>推挽输出</code>模式；初始电平根据需求设定；不进行上拉、下拉电阻；输出速率任意。</p></div><h2 id="程序设计" tabindex="-1"><a class="header-anchor" href="#程序设计"><span>程序设计</span></a></h2><p>使用<code>HAL_GPIO_WritePin</code>完成IO口高低电平的控制。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HAL_GPIO_WritePin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">LED_GPIO_Port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> LED_Pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> GPIO_PIN_RESET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//低电平</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HAL_GPIO_WritePin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">LED_GPIO_Port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> LED_Pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> GPIO_PIN_SET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//低电平</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,34))])}const c=p(k,[["render",u]]),D=JSON.parse('{"path":"/article/xu1b0qqq/","title":"LED","lang":"zh-CN","frontmatter":{"title":"LED","createTime":"2025/07/21 13:58:23","permalink":"/article/xu1b0qqq/"},"readingTime":{"minutes":2.28,"words":685},"git":{"createdTime":1753245019000,"updatedTime":1754797037000,"contributors":[{"name":"KB-talk","username":"KB-talk","email":"zkb13258847839@163.com","commits":6,"avatar":"https://avatars.githubusercontent.com/KB-talk?v=4","url":"https://github.com/KB-talk"}]},"filePathRelative":"notes/STM32/2.基础篇/1.LED.md","headers":[]}');export{c as comp,D as data};
